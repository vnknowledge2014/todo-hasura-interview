{"version":3,"file":"index.test.js","sourceRoot":"","sources":["../../src/tests/index.test.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,2CAA8C;AAC9C,oDAA4B;AAC5B,gBAAM,CAAC,MAAM,EAAE,CAAC;AAEhB,iCAAkG;AAClG,+CAAkD;AAElD,MAAM,MAAM,GAAG,IAAI,qBAAY,EAAE,CAAC;AAElC,SAAS,CAAC,GAAS,EAAE;IACjB,OAAO,MAAM,MAAM,CAAC,YAAY,CAAC;QAC7B,MAAM,CAAC,KAAK,CAAC,UAAU,EAAE;QACzB,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE;QACxB,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE;QACxB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACf,IAAI,EAAE;gBACF,EAAE,EAAE,sCAAsC;gBAC1C,IAAI,EAAE,MAAM;aACf;SACJ,CAAC;KACL,CAAC,CAAC;AACP,CAAC,CAAA,CAAC,CAAC;AAEH,QAAQ,CAAC,GAAS,EAAE;IAChB,OAAO,MAAM,MAAM,CAAC,YAAY,CAAC;QAC7B,MAAM,CAAC,KAAK,CAAC,UAAU,EAAE;QACzB,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE;QACxB,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE;KAC3B,CAAC,CAAC;AACP,CAAC,CAAA,CAAC,CAAC;AAEH,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;IACnC,EAAE,CAAC,0DAA0D,EAAE,GAAS,EAAE;QACtE,OAAO,IAAA,yBAAc,EAAC,GAAG,OAAO,CAAC,GAAG,CAAC,aAAa,kBAAkB,EAAE,6BAAsB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YACtG,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAA;IACN,CAAC,CAAA,CAAC,CAAA;IAEF,EAAE,CAAC,0DAA0D,EAAE,GAAS,EAAE;QACtE,OAAO,IAAA,yBAAc,EAAC,GAAG,OAAO,CAAC,GAAG,CAAC,aAAa,kBAAkB,EAAE,6BAAsB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YACtG,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAA;IACN,CAAC,CAAA,CAAC,CAAA;AACN,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,yBAAyB,EAAE,GAAG,EAAE;IACrC,IAAI,CAAC,4DAA4D,EAAE,GAAS,EAAE;QAC1E,OAAO,IAAA,yBAAc,EAAC,GAAG,OAAO,CAAC,GAAG,CAAC,aAAa,oBAAoB,EAAE,6BAAsB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YACxG,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAA;IACN,CAAC,CAAA,CAAC,CAAC;IAEH,IAAI,CAAC,4DAA4D,EAAE,GAAS,EAAE;QAC1E,OAAO,IAAA,yBAAc,EAAC,GAAG,OAAO,CAAC,GAAG,CAAC,aAAa,oBAAoB,EAAE,+BAAwB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YAC1G,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAA;IACN,CAAC,CAAA,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["import { PrismaClient } from \"@prisma/client\";\nimport dotenv from \"dotenv\";\ndotenv.config();\n\nimport { eventTodoItemAddedMock, eventTodoItemEmptyMock, eventTodoItemUpdatedMock } from \"./data\";\nimport { testEventPostM } from \"./utils/test_api\";\n\nconst prisma = new PrismaClient();\n\nbeforeAll(async () => {\n    return await prisma.$transaction([\n        prisma.audit.deleteMany(),\n        prisma.todo.deleteMany(),\n        prisma.user.deleteMany(),\n        prisma.user.create({\n            data: {\n                id: \"bf4481bc-4883-41b2-ab5e-5deca59c79a1\",\n                name: \"mike\"\n            }\n        })\n    ]);\n});\n\nafterAll(async () => {\n    return await prisma.$transaction([\n        prisma.audit.deleteMany(),\n        prisma.todo.deleteMany(),\n        prisma.user.deleteMany(),\n    ]);\n});\n\ndescribe('Event Todo Item Added', () => {\n    it(\"Should return status code 200 with right todo item added\", async () => {\n        return testEventPostM(`${process.env.BASE_URL_TEST}/todo_item_added`, eventTodoItemAddedMock).then(data => {\n            expect(data).toEqual(200);\n        })\n    })\n\n    it(\"Should return status code 400 with wrong todo item added\", async () => {\n        return testEventPostM(`${process.env.BASE_URL_TEST}/todo_item_added`, eventTodoItemEmptyMock).then(data => {\n            expect(data).toEqual(400);\n        })\n    })\n});\n\ndescribe(\"Event Todo Item Updated\", () => {\n    test('Should return status code 400 with wrong todo item updated', async () => {\n        return testEventPostM(`${process.env.BASE_URL_TEST}/todo_item_updated`, eventTodoItemEmptyMock).then(data => {\n            expect(data).toEqual(400);\n        })\n    });\n\n    test('Should return status code 200 with right todo item updated', async () => {\n        return testEventPostM(`${process.env.BASE_URL_TEST}/todo_item_updated`, eventTodoItemUpdatedMock).then(data => {\n            expect(data).toEqual(200);\n        })\n    });\n});\n"]}