{"version":3,"file":"resolvers.js","sourceRoot":"","sources":["../../src/graphql/resolvers.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,4DAA+B;AACxB,MAAM,kBAAkB,GAAG,CAAO,SAAiB,EAAE,QAAgB,EAAE,EAAE;IAC5E,IAAI;QACA,MAAM,aAAa,GAAG,MAAM,IAAA,oBAAK,EAAC,GAAG,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,EAAE;YAChE,MAAM,EAAE,MAAM;YACd,OAAO,EAAE;gBACL,cAAc,EAAE,kBAAkB;gBAClC,uBAAuB,EAAE,GAAG,OAAO,CAAC,GAAG,CAAC,2BAA2B,EAAE;gBACrE,eAAe,EAAE,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE;aACzC;YACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE,CAAC;SAClE,CAAC,CAAC;QACH,OAAO,MAAM,aAAa,CAAC,IAAI,EAAE,CAAC;KACrC;IAAC,OAAO,KAAK,EAAE;QACZ,MAAM,IAAI,KAAK,CAAC,GAAG,KAAK,EAAE,CAAC,CAAC;KAC/B;AACL,CAAC,CAAA,CAAC;AAfW,QAAA,kBAAkB,sBAe7B","sourcesContent":["import fetch from \"node-fetch\";\nexport const GraphqlServicePost = async (variables: object, graphqlQ: string) => {\n    try {\n        const fetchResponse = await fetch(`${process.env.GRAPHQL_API_URL}`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"x-hasura-admin-secret\": `${process.env.HASURA_GRAPHQL_ADMIN_SECRET}`,\n                \"X-Hasura-Role\": `${process.env.Role}`,\n            },\n            body: JSON.stringify({ query: graphqlQ, variables: variables })\n        });\n        return await fetchResponse.json();\n    } catch (error) {\n        throw new Error(`${error}`);\n    }\n};"]}